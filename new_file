# FusionNet Error Codes

This document provides a detailed explanation of all the error codes used in the FusionNet application. It is designed for **developers onboarding to the project**, so they can understand errors, their meaning, and how to handle them.

---

## Table of Contents

1. [Introduction](#introduction)
2. [Error Code Structure](#error-code-structure)
3. [HTTP Status Codes](#http-status-codes)
4. [Application Error Codes](#application-error-codes)
5. [How to Use Error Codes](#how-to-use-error-codes)
6. [Examples](#examples)

---

## Introduction

In any backend system, errors can occur for many reasons: invalid requests, missing data, server issues, or failed business rules.  

FusionNet classifies errors into **two main types**:

1. **HTTP Errors** – Standard HTTP status codes like 404, 500, etc.  
2. **Application Errors** – Custom errors generated by FusionNet for specific business logic or validation rules.  

Using structured error codes makes it easy to **debug issues**, **log problems consistently**, and **communicate errors to the frontend**.

---

## Error Code Structure

### 1. HTTP Errors

These are standard codes defined by the HTTP protocol. Examples:

- `400` → Bad Request  
- `401` → Unauthorized  
- `404` → Not Found  
- `500` → Internal Server Error  

**Tip:** Always check the HTTP code first before looking at custom application errors.

### 2. Application Errors

FusionNet uses a **prefix + number** format for custom errors:

FN###

Where:

- **`FN`** → Stands for **FusionNet** (project-specific).  
- **`###`** → A unique numeric identifier (e.g., `001`, `002`).  

**Why we use `FN` instead of just numbers:**  
- Prevents confusion with HTTP codes.  
- Easy to identify the source of the error in logs or API responses.  
- Makes debugging faster for developers.

---

## HTTP Status Codes

| Status Code | Name                  | Description                                          | Recommended Action                 |
|------------|----------------------|------------------------------------------------------|-----------------------------------|
| 400        | Bad Request           | The request was invalid or cannot be served.        | Check the request parameters.     |
| 401        | Unauthorized          | Authentication is required and has failed.         | Provide valid credentials.        |
| 403        | Forbidden             | The request is understood, but access is denied.   | Ensure you have permission.       |
| 404        | Not Found             | The requested resource could not be found.         | Verify the URL or resource ID.    |
| 500        | Internal Server Error | An unexpected error occurred on the server.        | Check server logs for details.    |
| 503        | Service Unavailable   | The server is currently unavailable.               | Retry after some time.            |

---

## Application Error Codes

| Code   | Name                       | Description                                           | Recommended Action                     |
|--------|----------------------------|-------------------------------------------------------|---------------------------------------|
| FN001  | Project Not Found           | The specified project ID does not exist.             | Verify the project ID.                |
| FN002  | Submittal Upload Failed     | Error occurred while uploading the submittal.        | Retry the upload or check file format.|
| FN003  | OCR Processing Error        | Error occurred during OCR processing.                | Check the document or retry later.    |
| FN004  | Validation Failed           | Document failed compliance validation.               | Review validation errors.             |
| FN005  | Reviewer Approval Missing   | No reviewer assigned for the checkpoint.             | Assign a reviewer.                    |
| FN006  | Compliance Report Failed    | Error generating compliance report.                  | Retry the generation process.         |

**Explanation for Developers:**  
- Each error code represents a **specific scenario** in the backend.  
- Frontend can use these codes to **show user-friendly messages**.  
- Always log these codes in **backend logs** for easier debugging.

---

## How to Use Error Codes

1. **Backend**:  
   - When a function fails, throw an exception with the **HTTP code** and the **FusionNet error code**.  
   - Example:

   ```json
   {
     "httpStatus": 400,
     "errorCode": "FN002",
     "message": "Submittal upload failed. Please check the file format."
   }
   ```

2. **Frontend**:
    - Check the errorCode to provide specific messages to the user.
    - Optionally, use httpStatus to handle generic errors.

3. **Logging**:
    - Always include the errorCode in server logs.
    - Makes tracing and debugging much faster.


**Examples**
**Example 1**: Submittal Upload Error

```json
{
  "httpStatus": 400,
  "errorCode": "FN002",
  "message": "Submittal upload failed. Please check the file format and try again."
}
```

**Example 2**: Validation Error
```json
{
  "httpStatus": 422,
  "errorCode": "FN004",
  "message": "Document failed validation due to missing mandatory fields."
}
```

**Example 3**: Project Not Found
``` json
{
  "httpStatus": 404,
  "errorCode": "FN001",
  "message": "Project with ID 12345 does not exist."
}
```

## Notes for Onboarding Developers:

- Always use the provided error codes; don’t create new numbers without approval.
- Check both HTTP status and application error code when debugging issues.
- Refer to this document whenever you add new functionality that might fail.
